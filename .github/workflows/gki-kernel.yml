name: GKI Kernel Build

on:
  workflow_call:
    inputs:
      out_dir:
        required: true
        type: string
        description: >
          Output directory of gki,
          for example: android12-5.10
      version:
        required: true
        type: string
        description: >
          With SUBLEVEL of kernel,
          for example: android12-5.10-66
      tag:
        required: true
        type: string
        description: >
          Part of branch name of common kernel manifest,
          for example: android12-5.10-2021-11
      os_version:
        required: true
        type: string
        description: >
          Android version,
          for example: 12.0.0
      os_patch_level:
        required: true
        type: string
        description: >
          Part of branch name of common kernel manifest,
          for example: 2021-11
      patch_path:
        required: true
        type: string
        description: >
          Directory name of .github/patches/<patch_path>
          for example: 5.10
    secrets:
      BOOT_SIGN_KEY:
        required: true

jobs:
  build:
    name: Build aarch64-${{ inputs.version }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "2G"
      CCACHE_HARDLINK: "true"
    steps:
    - uses: actions/checkout@v3
      with:
        path: KernelSU
        fetch-depth: 0

    - uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-aarch64-${{ inputs.version }}
        append-timestamp: false
        save: ${{ github.event_name != 'pull_request' }}

    - name: Setup kernel source
      run: |
        cd $GITHUB_WORKSPACE
        git clone https://gerrit.googlesource.com/git-repo
        mkdir android-kernel && cd android-kernel
        ../git-repo/repo init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${{ inputs.tag }}
        ../git-repo/repo sync -j$(nproc --all)
        curl -Lo gki-kernel.zip https://dl.google.com/android/gki/gki-certified-boot-${{ inputs.tag }}_r1.zip
        unzip gki-kernel.zip
        tools/mkbootimg/unpack_bootimg.py --boot_img=$(find . -maxdepth 1 -name "*.img")
    
    - name: Setup KernelSU
      env: 
        PATCH_PATH: ${{ inputs.patch_path }}
      run: |
        cd $GITHUB_WORKSPACE/android-kernel
        echo "[+] KernelSU setup"
        GKI_ROOT=$(pwd)
        echo "[+] GKI_ROOT: $GKI_ROOT"
        echo "[+] Copy kernel su driver to $GKI_ROOT/common/drivers"
        ln -sf $GITHUB_WORKSPACE/KernelSU/kernel $GKI_ROOT/common/drivers/kernelsu
        echo "[+] Add kernel su driver to Makefile"
        DRIVER_MAKEFILE=$GKI_ROOT/common/drivers/Makefile
        grep -q "kernelsu" $DRIVER_MAKEFILE || echo "obj-y += kernelsu/" >> $DRIVER_MAKEFILE
        echo "[+] Apply KernelSU patches"
        cd $GKI_ROOT/common/ && git apply $GITHUB_WORKSPACE/KernelSU/.github/patches/$PATCH_PATH/*.patch
        cd -
        echo "[+] KernelSU setup Done."
    
    - name: Symbol magic
      run: |
        echo "[+] Export all symbol from abi_gki_aarch64.xml"
        COMMON_ROOT=$GITHUB_WORKSPACE/android-kernel/common
        KSU_ROOT=$GITHUB_WORKSPACE/KernelSU
        ABI_XML=$COMMON_ROOT/android/abi_gki_aarch64.xml
        SYMBOL_LIST=$COMMON_ROOT/android/abi_gki_aarch64
        # python3 $KSU_ROOT/scripts/abi_gki_all.py $ABI_XML > $SYMBOL_LIST
        echo "[+] Add KernelSU symbols"
        cat $KSU_ROOT/kernel/export_symbol.txt | awk '{sub("[ \t]+","");print "  "$0}' >> $SYMBOL_LIST

    - name: Setup boot sign key
      if: ${{ ( github.event_name != 'pull_request' && github.ref == 'refs/heads/main' ) || github.ref_type == 'tag' }}
      working-directory: android-kernel
      env:
        BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
      run: |
        if [ ! -z "$BOOT_SIGN_KEY" ]; then
          echo "$BOOT_SIGN_KEY" > prebuilts/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
        fi

    - name: Build boot.img
      working-directory: android-kernel
      run: CCACHE="/usr/bin/ccache" BUILD_BOOT_IMG=1 SKIP_VENDOR_BOOT=1 KERNEL_BINARY=Image GKI_RAMDISK_PREBUILT_BINARY=out/ramdisk AVB_SIGN_BOOT_IMG=1 AVB_BOOT_PARTITION_SIZE=$((64*1024*1024)) AVB_BOOT_ALGORITHM=SHA256_RSA2048 AVB_BOOT_KEY=prebuilts/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem BOOT_IMAGE_HEADER_VERSION=4 LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh
    
    - name: Build boot-gz.img
      working-directory: android-kernel
      run: |
        cat out/${{ inputs.out_dir }}/dist/Image | ./prebuilts/build-tools/path/linux-x86/gzip -n -f -9 > out/${{ inputs.out_dir }}/dist/Image.gz
        tools/mkbootimg/mkbootimg.py --header_version 4 --kernel ./out/${{ inputs.out_dir }}/dist/Image.gz --ramdisk out/ramdisk --output ./out/${{ inputs.out_dir }}/dist/boot-gz.img --os_version ${{ inputs.os_version }} --os_patch_level ${{ inputs.os_patch_level }}
        ./build/build-tools/path/linux-x86/avbtool add_hash_footer --partition_name boot --partition_size $((64*1024*1024)) --image out/${{ inputs.out_dir }}/dist/boot-gz.img --algorithm SHA256_RSA2048 --key ./prebuilts/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem

    - name: Build boot-lz4_lg.img
      working-directory: android-kernel
      run: |
        tools/mkbootimg/mkbootimg.py --header_version 4 --kernel ./out/${{ inputs.out_dir }}/dist/Image.lz4 --ramdisk out/ramdisk --output ./out/${{ inputs.out_dir }}/dist/boot-lz4_lg.img --os_version ${{ inputs.os_version }} --os_patch_level ${{ inputs.os_patch_level }}
        ./build/build-tools/path/linux-x86/avbtool add_hash_footer --partition_name boot --partition_size $((64*1024*1024)) --image out/${{ inputs.out_dir }}/dist/boot-lz4_lg.img --algorithm SHA256_RSA2048 --key ./prebuilts/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem

    - name: Build boot-lz4_legacy.img
      working-directory: android-kernel
      run: |
        truncate --size=-4 ./out/${{ inputs.out_dir }}/dist/Image.lz4
        tools/mkbootimg/mkbootimg.py --header_version 4 --kernel ./out/${{ inputs.out_dir }}/dist/Image.lz4 --ramdisk out/ramdisk --output ./out/${{ inputs.out_dir }}/dist/boot-lz4_legacy.img --os_version ${{ inputs.os_version }} --os_patch_level ${{ inputs.os_patch_level }}
        ./build/kernel/build-tools/path/linux-x86/avbtool add_hash_footer --partition_name boot --partition_size $((64*1024*1024)) --image out/${{ inputs.out_dir }}/dist/boot-lz4_legacy.img --algorithm SHA256_RSA2048 --key ./prebuilts/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem

    - name: Upload Image.gz
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.version }}-Image.gz
        path: android-kernel/out/${{ inputs.out_dir }}/dist/Image.gz

    - name: Upload boot.img
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.version }}-boot.img
        path: android-kernel/out/${{ inputs.out_dir }}/dist/boot.img

    - name: Upload boot-gz.img
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.version }}-boot-gz.img
        path: android-kernel/out/${{ inputs.out_dir }}/dist/boot-gz.img

    - name: Upload boot-lz4_lg.img
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.version }}-boot-lz4_lg.img
        path: android-kernel/out/${{ inputs.out_dir }}/dist/boot-lz4_lg.img

    - name: Upload boot-lz4_legacy.img
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.version }}-boot-lz4_legacy.img
        path: android-kernel/out/${{ inputs.out_dir }}/dist/boot-lz4_legacy.img

    - name: Set output
      env:
        BOOT_GZ: ${{ inputs.version }}-Image.gz
        BOOT_IMG: ${{ inputs.version }}-boot.img
        BOOT_GZ_IMG: ${{ inputs.version }}-boot-gz.img
        BOOT_LZ4_LG_IMG: ${{ inputs.version }}-boot-lz4_lg.img
        BOOT_LZ4_LEGACY_IMG: ${{ inputs.version }}-boot-lz4_legacy.img
      run: |
        echo "BOOT_GZ=$BOOT_GZ" >> $GITHUB_OUTPUT
        echo "BOOT_IMG=$BOOT_IMG" >> $GITHUB_OUTPUT
        echo "BOOT_GZ_IMG=$BOOT_GZ_IMG" >> $GITHUB_OUTPUT
        echo "BOOT_LZ4_LG_IMG=$BOOT_LZ4_LG_IMG" >> $GITHUB_OUTPUT
        echo "BOOT_LZ4_LEGACY_IMG=$BOOT_LZ4_LEGACY_IMG" >> $GITHUB_OUTPUT